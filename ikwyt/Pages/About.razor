@page "/About"

@using IKWYT.Data
@using Toolbelt.Blazor.HeadElement
@inject IQuizService QuizService
@inject NavigationManager NavigationManager

<Title>IKWYT - About</Title>

<h1><span class="material-icons">info</span>   About</h1>
<br />
<p>These quizzes were made for an iPhone app back in 2011-13.  The app was relatively popular and was downloaded in more than a hundred countries, but, since this was just a hobby project, maintenance was not kept up and the app was eventually withdrawn from the App Store when it could not keep up with changing requirements.  This new web site was made during the Corona crisis of 2020.  If for some reason you want to, you can <a href="mailto: ikwyt@altiboxmail.no">contact us at ikwyt@altiboxmail.no</a></p>
<p>If you are still reading, you can read more if you enter the secret ten character password.  Maybe you can guess it?  It is possible to find somewhere on the web site, something there is ten of...</p>
<br />
<RadzenPassword @ref="password" Placeholder="Password here ..." Change=@(args => OnChange(args, "Password")) />

@if (ShowSecret)
{ 
    <h3>Most recently played quizzes</h3>
    <p>Shows the 10 most recently played quizzes, when they were last played and how many times they have been played.  The newest on the left.  Talk about a chart trying to do to many things at the same time.</p>
    <RadzenChart>
        <RadzenColumnSeries Data="@lastPlayed" CategoryProperty="Order" Title="Use tooltip for more info" LineType="LineType.Dashed" ValueProperty="Count">
            <TooltipTemplate Context="data">
                <div>
                    <span>@data.Name</span> has been played @data.Count times and was last played @data.Date
                </div>
            </TooltipTemplate>
        </RadzenColumnSeries>
        <RadzenColumnOptions Radius="5" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="# times played" />
        </RadzenValueAxis>
    </RadzenChart>

    <br />
    <h3>Quizzes by difficulty level</h3>
    <p>The difficulty level of a quiz is dynamically calculated based on the average score.  The difficulty level for a quiz therefore might change over time.  Medium means an average score of about 50%.</p>
    <RadzenChart>
        <RadzenDonutSeries Data="@difficultyLevels" CategoryProperty="Difficulty" ValueProperty="Count">
            <TooltipTemplate Context="data">
                @if (data.Count == 1)
                {
                    <div>
                        @data.Count quiz is currently at level <span>@data.Difficulty.ToLower()</span>.
                    </div>
                }
                else
                {
                    <div>
                        @data.Count quizzes are currently at level <span>@data.Difficulty.ToLower()</span>.
                    </div>
                }
            </TooltipTemplate>
            <TitleTemplate>
                <div class="rz-donut-content">
                    <div>Mmm,</div>
                    <div>donuts...</div>
                </div>
            </TitleTemplate>
        </RadzenDonutSeries>
    </RadzenChart>
}
<br />
<br />

@code {
    DataItem[] lastPlayed;
    PieItem[] difficultyLevels;
    bool ShowSecret = false;
    RadzenPassword password;

    class DataItem
    {
        public string Date { get; set; }
        public int Count { get; set; }
        public string Name { get; set; }
        public int Order { get; set; }
    }

    class PieItem
    {
        public string Difficulty { get; set; }
        public int Count { get; set; }
    }

    void OnChange(string value, string name)
    {
        if (value.ToLower() == "hwpbebdmaa")
        {
            ShowSecret = true;
            password.Visible = false;
        }
    }

    protected override void OnInitialized()
    {
        var allQuizzes = QuizService.GetQuizMetaData();
        allQuizzes = allQuizzes.OrderByDescending(x => x.LastPlayed).ToList();

        var dataItems = new List<DataItem>();
        foreach (var quiz in allQuizzes)
        {
            if (quiz.LastPlayed == DateTime.MinValue)
                continue;
            var dataItem = new DataItem
            {
                Date = QuizService.ConvertToRelativeTime(quiz.LastPlayed),
                Count = quiz.NumTimesPlayed,
                Name = quiz.Title,
                Order = (dataItems.Count + 1)
            };
            dataItems.Add(dataItem);
            if (dataItems.Count == 10)
                break;
        }
        lastPlayed = dataItems.ToArray();

        var pieItems = new List<PieItem>();
        foreach (var quiz in allQuizzes)
        {
            var pieItem = pieItems.SingleOrDefault(x => x.Difficulty == quiz.Difficulty);
            if (pieItem == null)
            {
                pieItem = new PieItem { Difficulty = quiz.Difficulty };
                pieItems.Add(pieItem);
            }
            pieItem.Count++;
        }
        difficultyLevels = pieItems.ToArray();
    }
}

