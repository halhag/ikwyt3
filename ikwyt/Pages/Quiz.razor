@page "/quiz/{name}"

@using IKWYT.Data
@using Repository
@using Radzen
@using Radzen.Blazor
@using Toolbelt.Blazor.HeadElement

@inject IQuizService QuizService
@inject NavigationManager NavigationManager

<Title>IKWYT - @QuizModel.Title</Title>

<h1><span class="material-icons">library_add_check</span>   Quiz: @QuizModel.Title</h1>

<p />
<b>Question</b> @QuestionNumber of @QuizModel.Questions.Count
<br />
<b>Your score:</b> @CorrectAnswers
<p />
@foreach (var questionPart in QuestionParts)
{
    <p>@questionPart</p>
}
@if (ShowAdditionalText)
{
    <RadzenAccordion @ref="accordion">
        <Items>
            <RadzenAccordionItem Text="More information about the study">
                @foreach (var additionalTextPart in AdditionalTextParts)
                {
                    <p>@additionalTextPart</p>
                }
            </RadzenAccordionItem>
        </Items>
    </RadzenAccordion>
}
<form>
    <RadzenRadioButtonList @ref="radioButtonList" @bind-Value="SelectedAnswer" TValue="string" Orientation="Orientation.Vertical" Change="@((args) => Change(args, SelectedAnswer))">
        <Items>
            @foreach (var alternative in @Alternatives)
            {
                <RadzenRadioButtonListItem Text="@alternative.Text" Value="@alternative.Text" />
            }
        </Items>
    </RadzenRadioButtonList>
    @if (ShowAnswer)
    {
        if (AnswerWasCorrect)
        {
            <b>Correct answer!</b>
            <br />
        }
        else
        {
            <b>Incorrect answer!</b>
            <br />
            <label>The correct answer was: <b>@CorrectAnswer</b></label>
            <br />
        }
    }
    <br />
    <RadzenButton Text="@ButtonText" Click="@OnSubmit" />
</form>
<br />
<br />


@code {
    [Parameter]
    public string Name { get; set; }

    RadzenRadioButtonList<string> radioButtonList;
    RadzenAccordion accordion;

    public Repository.Quiz QuizModel { get; set; }
    public int QuestionNumber = 0;
    public int CorrectAnswers { get; set; }
    public string[] QuestionParts { get; set; }
    public string[] AdditionalTextParts { get; set; }
    public string SelectedAnswer = string.Empty;
    public string ButtonText = "Submit";
    public List<Alternative> Alternatives = new List<Alternative>();
    public string CorrectAnswer = string.Empty;
    public bool ShowAnswer = false;
    public bool AnswerWasCorrect = false;
    public bool ShowAdditionalText = false;

    private void PrepareQuestion()
    {
        QuestionParts = QuizModel.Questions[QuestionNumber].Text.Split(@"\r\n");
        if (string.IsNullOrWhiteSpace(QuizModel.Questions[QuestionNumber].AdditionalText))
        {
            ShowAdditionalText = false;
            if (accordion != null)
            {
                accordion.Visible = false;
            }
        }
        else {
            ShowAdditionalText = true;
            if (accordion != null)
            {
                accordion.Visible = true;
            }
            AdditionalTextParts = QuizModel.Questions[QuestionNumber].AdditionalText.Split(@"\r\n");
        }
        Alternatives = QuizModel.Questions[QuestionNumber].Alternatives.OrderBy(x => x.Text).ToList();
        CorrectAnswer = Alternatives.Single(x => x.IsCorrect).Text;
        QuestionNumber++;
        if (radioButtonList != null)
        {
            // Hack:  This is just to make sure the radio button list refreshes/updates
            var temporaryExtraItem = new RadzenRadioButtonListItem<string> { UniqueID = Guid.NewGuid().ToString() };
            radioButtonList.AddItem(temporaryExtraItem);
            radioButtonList.RemoveItem(temporaryExtraItem);
        }
    }

    protected override void OnInitialized()
    {
        Name = Name ?? "Oops, missing in action";
        QuizModel = QuizService.GetQuiz(Name);
        PrepareQuestion();
    }

    void SelectionChanged(ChangeEventArgs args)
    {
        SelectedAnswer = args.Value.ToString();
    }

    void Change(string value, string name)
    {
        SelectedAnswer = name;
    }

    public void OnSubmit()
    {
        if (ButtonText == "Submit")
        {
            ShowAnswer = true;
            if (SelectedAnswer == CorrectAnswer)
            {
                AnswerWasCorrect = true;
                CorrectAnswers++;
            }
            else
            {
                AnswerWasCorrect = false;
            }
            if (QuestionNumber == QuizModel.Questions.Count)
            {
                ButtonText = "Finish";
            }
            else
            {
                ButtonText = "Next";
            }

        }
        else if (ButtonText == "Next")
        {
            ShowAnswer = false;
            SelectedAnswer = string.Empty;
            PrepareQuestion();
            ButtonText = "Submit";
        }
        else if (ButtonText == "Finish")
        {
            QuizService.SaveScore(QuizModel.Id, CorrectAnswers);
            NavigationManager.NavigateTo("/references/quiz/" + Name + "/score/" + CorrectAnswers.ToString());
        }
    }
}
